{"version":3,"file":"static/js/105.bb83c05e.chunk.js","mappings":"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","sources":["components/HourlyForecast/HourlyForecast.js","utils/weatherUtils.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useWeather } from '../../context/WeatherContext';\nimport { kelvinToFahrenheit } from '../../utils/weatherUtils';\nimport LoadingSpinner from '../LoadingSpinner/LoadingSpinner';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport './HourlyForecast.css';\n\nconst HourlyForecast = () => {\n  const { weatherData } = useWeather();\n\n  // Format hourly data for display\n  const hourlyData = useMemo(() => {\n    if (!weatherData.hourly || weatherData.hourly.length === 0) {\n      return [];\n    }\n\n    return weatherData.hourly.slice(0, 12).map((hour, index) => {\n      const date = new Date(hour.dt * 1000);\n      const isNow = index === 0;\n      \n      return {\n        time: isNow ? 'Now' : date.toLocaleTimeString('en-US', { \n          hour: 'numeric',\n          hour12: true \n        }),\n        temp: kelvinToFahrenheit(hour.temp),\n        icon: hour.weather[0].icon,\n        description: hour.weather[0].description,\n        precipitation: Math.round((hour.pop || 0) * 100),\n        humidity: hour.humidity,\n        windSpeed: Math.round(hour.wind_speed * 2.237), // Convert m/s to mph\n        feelsLike: kelvinToFahrenheit(hour.feels_like)\n      };\n    });\n  }, [weatherData.hourly]);\n\n  if (weatherData.isLoading && !weatherData.hourly.length) {\n    return (\n      <div className=\"hourly-forecast\">\n        <h3>Hourly Forecast</h3>\n        <LoadingSpinner size=\"medium\" message=\"Loading hourly forecast...\" />\n      </div>\n    );\n  }\n\n  if (weatherData.error && !weatherData.hourly.length) {\n    return (\n      <div className=\"hourly-forecast\">\n        <h3>Hourly Forecast</h3>\n        <ErrorMessage\n          title=\"Hourly Forecast Unavailable\"\n          message=\"Unable to load hourly weather data\"\n          type=\"error\"\n        />\n      </div>\n    );\n  }\n\n  if (hourlyData.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"hourly-forecast\">\n      <h3>Next 12 Hours</h3>\n      <div className=\"hourly-scroll-container\">\n        <div className=\"hourly-items\">\n          {hourlyData.map((hour, index) => (\n            <div key={index} className=\"hourly-item\">\n              <div className=\"hourly-time\">{hour.time}</div>\n              <div className=\"hourly-icon\">\n                <img\n                  src={`https://openweathermap.org/img/wn/${hour.icon}.png`}\n                  alt={hour.description}\n                  title={hour.description}\n                />\n              </div>\n              <div className=\"hourly-temp\">{hour.temp}Â°</div>\n              <div className=\"hourly-precipitation\">\n                <span className=\"precip-icon\">ðŸ’§</span>\n                <span className=\"precip-value\">{hour.precipitation}%</span>\n              </div>\n              <div className=\"hourly-details\">\n                <div className=\"detail-item\">\n                  <span className=\"detail-icon\">ðŸ’¨</span>\n                  <span className=\"detail-value\">{hour.windSpeed} mph</span>\n                </div>\n                <div className=\"detail-item\">\n                  <span className=\"detail-icon\">ðŸ’§</span>\n                  <span className=\"detail-value\">{hour.humidity}%</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HourlyForecast;\n","// Shared utility functions for weather components\n\n// Convert Kelvin to Fahrenheit\nexport const kelvinToFahrenheit = (kelvin) => {\n  return kelvin !== null && kelvin !== undefined ? Math.round((kelvin - 273.15) * 1.8 + 32) : null;\n};\n\n// Calculate date for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getDateForOffset = (dayOffset) => {\n  return new Date(\n    new Date().getTime() + dayOffset * 24 * 60 * 60 * 1000\n  ).toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n};\n\n// Format coordinates to reduce precision\nexport const formatCoordinates = (latitude, longitude) => {\n  if (latitude === null || longitude === null) return null;\n  return {\n    lat: Math.round(latitude * 100) / 100,\n    lon: Math.round(longitude * 100) / 100\n  };\n};\n\n// Get day name for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getDayNameForOffset = (dayOffset) => {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const today = new Date().getDay();\n  return days[(today + dayOffset) % 7];\n};\n\n// Get short day name for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getShortDayNameForOffset = (dayOffset) => {\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const today = new Date().getDay();\n  return days[(today + dayOffset) % 7];\n};"],"names":["weatherData","useWeather","hourlyData","useMemo","hourly","length","slice","map","hour","index","date","Date","dt","time","toLocaleTimeString","hour12","temp","kelvinToFahrenheit","icon","weather","description","precipitation","Math","round","pop","humidity","windSpeed","wind_speed","feelsLike","feels_like","isLoading","_jsxs","className","children","_jsx","LoadingSpinner","size","message","error","ErrorMessage","title","type","src","concat","alt","kelvin","undefined","getDateForOffset","dayOffset","getTime","toLocaleDateString","month","day","year","getShortDayNameForOffset","getDay"],"sourceRoot":""}