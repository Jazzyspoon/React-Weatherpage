{"version":3,"file":"static/js/32.478df198.chunk.js","mappings":"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","sources":["components/CurrentWeather/CurrentWeather.js","utils/weatherUtils.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useWeather } from '../../context/WeatherContext';\nimport { kelvinToFahrenheit } from '../../utils/weatherUtils';\nimport LoadingSpinner from '../LoadingSpinner/LoadingSpinner';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport './CurrentWeather.css';\n\nconst CurrentWeather = () => {\n  const { weatherData } = useWeather();\n\n  // Format current weather data\n  const currentData = useMemo(() => {\n    if (!weatherData.current) {\n      return null;\n    }\n\n    const current = weatherData.current;\n    const sunrise = new Date(current.sunrise * 1000);\n    const sunset = new Date(current.sunset * 1000);\n\n    return {\n      temp: kelvinToFahrenheit(current.temp),\n      feelsLike: kelvinToFahrenheit(current.feels_like),\n      description: current.weather[0].description,\n      icon: current.weather[0].icon,\n      humidity: current.humidity,\n      pressure: Math.round(current.pressure * 0.02953), // Convert hPa to inHg\n      windSpeed: Math.round(current.wind_speed * 2.237), // Convert m/s to mph\n      windDirection: current.wind_deg,\n      visibility: Math.round(current.visibility * 0.000621371), // Convert m to miles\n      uvIndex: current.uvi,\n      sunrise: sunrise.toLocaleTimeString('en-US', { \n        hour: 'numeric', \n        minute: '2-digit',\n        hour12: true \n      }),\n      sunset: sunset.toLocaleTimeString('en-US', { \n        hour: 'numeric', \n        minute: '2-digit',\n        hour12: true \n      }),\n      dewPoint: kelvinToFahrenheit(current.dew_point),\n      clouds: current.clouds\n    };\n  }, [weatherData.current]);\n\n  const getWindDirection = (degrees) => {\n    const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n    return directions[Math.round(degrees / 22.5) % 16];\n  };\n\n  const getUVIndexLevel = (uvi) => {\n    if (uvi <= 2) return { level: 'Low', color: '#00E400' };\n    if (uvi <= 5) return { level: 'Moderate', color: '#FFFF00' };\n    if (uvi <= 7) return { level: 'High', color: '#FF8C00' };\n    if (uvi <= 10) return { level: 'Very High', color: '#FF0000' };\n    return { level: 'Extreme', color: '#8B00FF' };\n  };\n\n  if (weatherData.isLoading && !weatherData.current) {\n    return (\n      <div className=\"current-weather\">\n        <LoadingSpinner size=\"medium\" message=\"Loading current weather...\" />\n      </div>\n    );\n  }\n\n  if (weatherData.error && !weatherData.current) {\n    return (\n      <div className=\"current-weather\">\n        <ErrorMessage\n          title=\"Current Weather Unavailable\"\n          message=\"Unable to load current weather data\"\n          type=\"error\"\n        />\n      </div>\n    );\n  }\n\n  if (!currentData) {\n    return null;\n  }\n\n  const uvInfo = getUVIndexLevel(currentData.uvIndex);\n\n  return (\n    <div className=\"current-weather\">\n      <div className=\"current-main\">\n        <div className=\"current-temp-section\">\n          <div className=\"current-icon\">\n            <img\n              src={`https://openweathermap.org/img/wn/${currentData.icon}@2x.png`}\n              alt={currentData.description}\n            />\n          </div>\n          <div className=\"current-temp-info\">\n            <div className=\"current-temp\">{currentData.temp}°F</div>\n            <div className=\"current-description\">{currentData.description}</div>\n            <div className=\"feels-like\">Feels like {currentData.feelsLike}°F</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"current-details\">\n        <div className=\"detail-grid\">\n          <div className=\"detail-card\">\n            <div className=\"detail-icon\">💨</div>\n            <div className=\"detail-content\">\n              <div className=\"detail-label\">Wind</div>\n              <div className=\"detail-value\">{currentData.windSpeed} mph {getWindDirection(currentData.windDirection)}</div>\n            </div>\n          </div>\n\n          <div className=\"detail-card\">\n            <div className=\"detail-icon\">💧</div>\n            <div className=\"detail-content\">\n              <div className=\"detail-label\">Humidity</div>\n              <div className=\"detail-value\">{currentData.humidity}%</div>\n            </div>\n          </div>\n\n          <div className=\"detail-card\">\n            <div className=\"detail-icon\">🌡️</div>\n            <div className=\"detail-content\">\n              <div className=\"detail-label\">Pressure</div>\n              <div className=\"detail-value\">{currentData.pressure} inHg</div>\n            </div>\n          </div>\n\n          <div className=\"detail-card\">\n            <div className=\"detail-icon\">👁️</div>\n            <div className=\"detail-content\">\n              <div className=\"detail-label\">Visibility</div>\n              <div className=\"detail-value\">{currentData.visibility} mi</div>\n            </div>\n          </div>\n\n          <div className=\"detail-card\">\n            <div className=\"detail-icon\">☀️</div>\n            <div className=\"detail-content\">\n              <div className=\"detail-label\">UV Index</div>\n              <div className=\"detail-value\" style={{ color: uvInfo.color }}>\n                {currentData.uvIndex} ({uvInfo.level})\n              </div>\n            </div>\n          </div>\n\n          <div className=\"detail-card\">\n            <div className=\"detail-icon\">☁️</div>\n            <div className=\"detail-content\">\n              <div className=\"detail-label\">Cloudiness</div>\n              <div className=\"detail-value\">{currentData.clouds}%</div>\n            </div>\n          </div>\n\n          <div className=\"detail-card\">\n            <div className=\"detail-icon\">🌅</div>\n            <div className=\"detail-content\">\n              <div className=\"detail-label\">Sunrise</div>\n              <div className=\"detail-value\">{currentData.sunrise}</div>\n            </div>\n          </div>\n\n          <div className=\"detail-card\">\n            <div className=\"detail-icon\">🌇</div>\n            <div className=\"detail-content\">\n              <div className=\"detail-label\">Sunset</div>\n              <div className=\"detail-value\">{currentData.sunset}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CurrentWeather;\n","// Shared utility functions for weather components\n\n// Convert Kelvin to Fahrenheit\nexport const kelvinToFahrenheit = (kelvin) => {\n  return kelvin !== null && kelvin !== undefined ? Math.round((kelvin - 273.15) * 1.8 + 32) : null;\n};\n\n// Calculate date for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getDateForOffset = (dayOffset) => {\n  return new Date(\n    new Date().getTime() + dayOffset * 24 * 60 * 60 * 1000\n  ).toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n};\n\n// Format coordinates to reduce precision\nexport const formatCoordinates = (latitude, longitude) => {\n  if (latitude === null || longitude === null) return null;\n  return {\n    lat: Math.round(latitude * 100) / 100,\n    lon: Math.round(longitude * 100) / 100\n  };\n};\n\n// Get day name for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getDayNameForOffset = (dayOffset) => {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const today = new Date().getDay();\n  return days[(today + dayOffset) % 7];\n};\n\n// Get short day name for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getShortDayNameForOffset = (dayOffset) => {\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const today = new Date().getDay();\n  return days[(today + dayOffset) % 7];\n};"],"names":["weatherData","useWeather","currentData","useMemo","current","sunrise","Date","sunset","temp","kelvinToFahrenheit","feelsLike","feels_like","description","weather","icon","humidity","pressure","Math","round","windSpeed","wind_speed","windDirection","wind_deg","visibility","uvIndex","uvi","toLocaleTimeString","hour","minute","hour12","dewPoint","dew_point","clouds","isLoading","_jsx","className","children","LoadingSpinner","size","message","error","ErrorMessage","title","type","degrees","uvInfo","level","color","_jsxs","src","concat","alt","style","kelvin","undefined","getDateForOffset","dayOffset","getTime","toLocaleDateString","month","day","year","getShortDayNameForOffset","getDay"],"sourceRoot":""}