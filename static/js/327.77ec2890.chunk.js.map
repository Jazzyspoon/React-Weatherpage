{"version":3,"file":"static/js/327.77ec2890.chunk.js","mappings":"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","sources":["components/Dayweather/WeatherDay.js","components/Daypanel/daypanel.js","utils/weatherUtils.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Tooltip } from 'react-tooltip';\nimport { kelvinToFahrenheit, getDateForOffset } from '../../utils/weatherUtils';\nimport { useWeather } from '../../context/WeatherContext';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport LoadingSpinner from '../LoadingSpinner/LoadingSpinner';\nimport './WeatherDay.css';\n\n// This component now gets data from the WeatherContext instead of making its own API calls\n\nconst WeatherDay = ({ dayIndex }) => {\n  \"use memo\"; // Enable React Compiler optimization\n\n  const { weatherData: contextWeatherData } = useWeather();\n\n  // Calculate date for the specified day\n  const date = useMemo(() => getDateForOffset(dayIndex), [dayIndex]);\n\n  // Get weather data for this specific day from context\n  const dayWeatherData = useMemo(() => {\n    if (!contextWeatherData.daily || contextWeatherData.daily.length <= dayIndex) {\n      return {\n        min: null,\n        max: null,\n        imageIcon: null,\n        forecast: null,\n        precipChance: null,\n        isLoading: contextWeatherData.isLoading,\n        error: contextWeatherData.error\n      };\n    }\n\n    const dayData = contextWeatherData.daily[dayIndex];\n    return {\n      min: dayData.temp.min,\n      max: dayData.temp.max,\n      imageIcon: dayData.weather[0].icon,\n      forecast: dayData.summary,\n      precipChance: Math.round(dayData.pop * 100),\n      isLoading: false,\n      error: null\n    };\n  }, [contextWeatherData, dayIndex]);\n\n  // Memoize tooltip content\n  const tooltipHtml = useMemo(() => {\n    if (dayWeatherData.error) {\n      return `<div>Error loading forecast</div>`;\n    }\n    return `<div>${date}:</div><div>${dayWeatherData.forecast || 'Loading forecast...'}</div>${dayWeatherData.precipChance !== null ? `<div>Rain: ${dayWeatherData.precipChance}%</div>` : ''}`;\n  }, [date, dayWeatherData.forecast, dayWeatherData.precipChance, dayWeatherData.error]);\n\n  const { max, min, imageIcon, precipChance, isLoading, error } = dayWeatherData;\n\n  if (isLoading && !imageIcon) {\n    return (\n      <div className=\"weather-day-container\">\n        <LoadingSpinner\n          size=\"small\"\n          message=\"\"\n          className=\"weather-day-loading\"\n        />\n      </div>\n    );\n  }\n\n  if (error && !imageIcon) {\n    return (\n      <div className=\"weather-day-container\">\n        <div className=\"weather-day-error\">\n          <span className=\"error-icon\">‚ö†Ô∏è</span>\n          <span className=\"error-text\">Error</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      data-tooltip-id=\"weather-tooltip\"\n      data-tooltip-html={tooltipHtml}\n      data-tooltip-place=\"middle\"\n      className=\"weather-day-container\"\n    >\n      <Tooltip\n        id=\"weather-tooltip\"\n        border={'1px solid #222'}\n        style={{\n          backgroundColor: 'rgb(0, 255, 30)',\n          color: '#222',\n          padding: '10px',\n          borderRadius: '5px',\n          textAlign: 'center',\n          maxWidth: '150px',\n        }}\n        noArrow />\n      {imageIcon && (\n        <img\n          className=\"day-pane\"\n          src={`https://openweathermap.org/img/wn/${imageIcon}.png`}\n          alt={`Weather forecast for ${dayIndex === 0 ? 'today' : date}`}\n          aria-label={`Weather forecast for ${dayIndex === 0 ? 'today' : date}`}\n        />\n      )}\n      <div className=\"temp-row\">\n        <h5 className=\"black_text\">\n          {kelvinToFahrenheit(max)}¬∞\n        </h5>\n        <h5 className=\"light-grey_text\">\n          {kelvinToFahrenheit(min)}¬∞\n        </h5>\n      </div>\n      {precipChance !== null && (\n        <div className=\"precipitation\">\n          <span className=\"rain-icon\">üíß</span>\n          <span className=\"rain-chance\">{precipChance}%</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Wrap with ErrorBoundary for better error handling\nconst WeatherDayWithErrorBoundary = (props) => (\n  <ErrorBoundary fallback={<div className=\"weather-error\">Something went wrong</div>}>\n    <WeatherDay {...props} />\n  </ErrorBoundary>\n);\n\nexport default WeatherDayWithErrorBoundary;\n","import React, { useMemo } from 'react';\nimport './daypanel.css';\nimport WeatherDay from '../Dayweather/WeatherDay';\nimport { useWeather } from '../../context/WeatherContext';\nimport { getShortDayNameForOffset } from '../../utils/weatherUtils';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport LoadingSpinner from '../LoadingSpinner/LoadingSpinner';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\nconst Daypanel = () => {\n  \"use memo\"; // Enable React Compiler optimization\n\n  const { coordinates, weatherData } = useWeather();\n\n  // Calculate weekdays once using useMemo\n  const weekdays = useMemo(() => {\n    return Array.from({ length: 5 }, (_, i) => getShortDayNameForOffset(i));\n  }, []);\n\n  if (weatherData.isLoading && !weatherData.daily.length) {\n    return (\n      <LoadingSpinner\n        size=\"large\"\n        message=\"Loading weather data...\"\n        className=\"weather-loading\"\n      />\n    );\n  }\n\n  if (weatherData.error && !weatherData.daily.length) {\n    return (\n      <ErrorMessage\n        title=\"Weather Data Unavailable\"\n        message={`Unable to load weather information: ${weatherData.error}`}\n        type=\"error\"\n        className=\"weather-error\"\n      />\n    );\n  }\n\n  if (coordinates.latitude === null) {\n    return (\n      <LoadingSpinner\n        size=\"medium\"\n        message=\"Waiting for location data...\"\n        className=\"location-loading\"\n      />\n    );\n  }\n\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='day grey'>\n          <h5 className='grey_text'>Today</h5>\n          <WeatherDay dayIndex={0} />\n        </div>\n\n        <div className='day'>\n          <h5>{weekdays[1]}</h5>\n          <WeatherDay dayIndex={1} />\n        </div>\n\n        <div className='day'>\n          <h5>{weekdays[2]}</h5>\n          <WeatherDay dayIndex={2} />\n        </div>\n\n        <div className='day'>\n          <h5>{weekdays[3]}</h5>\n          <WeatherDay dayIndex={3} />\n        </div>\n\n        <div className='day'>\n          <h5>{weekdays[4]}</h5>\n          <WeatherDay dayIndex={4} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Wrap with ErrorBoundary for better error handling\nconst DaypanelWithErrorBoundary = () => (\n  <ErrorBoundary fallback={<div className=\"error-container\"><h3>Something went wrong with the weather panel</h3></div>}>\n    <Daypanel />\n  </ErrorBoundary>\n);\n\nexport default DaypanelWithErrorBoundary;","// Shared utility functions for weather components\n\n// Convert Kelvin to Fahrenheit\nexport const kelvinToFahrenheit = (kelvin) => {\n  return kelvin !== null && kelvin !== undefined ? Math.round((kelvin - 273.15) * 1.8 + 32) : null;\n};\n\n// Calculate date for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getDateForOffset = (dayOffset) => {\n  return new Date(\n    new Date().getTime() + dayOffset * 24 * 60 * 60 * 1000\n  ).toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n};\n\n// Format coordinates to reduce precision\nexport const formatCoordinates = (latitude, longitude) => {\n  if (latitude === null || longitude === null) return null;\n  return {\n    lat: Math.round(latitude * 100) / 100,\n    lon: Math.round(longitude * 100) / 100\n  };\n};\n\n// Get day name for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getDayNameForOffset = (dayOffset) => {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const today = new Date().getDay();\n  return days[(today + dayOffset) % 7];\n};\n\n// Get short day name for a specific day offset (0 = today, 1 = tomorrow, etc.)\nexport const getShortDayNameForOffset = (dayOffset) => {\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const today = new Date().getDay();\n  return days[(today + dayOffset) % 7];\n};"],"names":["WeatherDay","_ref","dayIndex","contextWeatherData","useWeather","weatherData","date","useMemo","getDateForOffset","dayWeatherData","daily","length","min","max","imageIcon","forecast","precipChance","isLoading","error","dayData","temp","weather","icon","summary","Math","round","pop","tooltipHtml","concat","_jsx","className","children","LoadingSpinner","size","message","_jsxs","Tooltip","id","border","style","backgroundColor","color","padding","borderRadius","textAlign","maxWidth","noArrow","src","alt","kelvinToFahrenheit","props","ErrorBoundary","fallback","_objectSpread","Daypanel","_useWeather","coordinates","weekdays","Array","from","_","i","getShortDayNameForOffset","ErrorMessage","title","type","latitude","kelvin","undefined","dayOffset","Date","getTime","toLocaleDateString","month","day","year","getDay"],"sourceRoot":""}